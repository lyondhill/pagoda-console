#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'pagoda/cli/version'
require 'pagoda/cli/common'

# command = ARGV.shift.strip rescue 'help'
# Pagoda::Runner.go(command, ARGV.dup)

include Pagoda::CLI::Common

program_desc 'Command line client for Pagodabox'

version Pagoda::CLI::VERSION

config_file '.pagodarc'

desc "Username created on pagodabox"
arg_name "Username"
flag [:u, :username]

desc "Password to connect to pagodabox"
arg_name "Password"
flag [:p, :password]

desc 'The app name for Pagoda Box'
arg_name 'APP_NAME'
flag [:a, :app]

desc "Help"
switch [:h, :help]

require 'pagoda/cli/commands'
require 'pagoda/cli'

GLI::DefaultHelpCommand.skips_pre = true

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  if global[:help] or options[:help]
    GLI.commands[:help].execute(global, {}, [ command.name ])
    false
  else
    if command and not global[:username] and not global[:password]
      puts "it appears this is the first time you have used our client"
      user, password = Pagoda::Command::Base.ask_for_credentials
      GLI.commands[:config].execute({}, {}, [ 'username', user     ])
      GLI.commands[:config].execute({}, {}, [ 'password', password ])
      global.merge!(username: user, password: password)
    end

    true
  end
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  ENV['GLI_DEBUG'] = 'true'
  false
end

exit GLI.run(ARGV)
