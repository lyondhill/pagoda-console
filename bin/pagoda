#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'pagoda/cli/version'

# command = ARGV.shift.strip rescue 'help'
# Pagoda::Runner.go(command, ARGV.dup)

include GLI

program_desc 'Describe your application here'

version Pagoda::CLI::VERSION

config_file '.pagodarc'

desc 'The app name for Pagoda Box'
arg_name 'APP_NAME'
flag [:a, :app]

desc "Help"
switch [:h, :help]

def command(*names)
  command = Command.new([names].flatten,@@next_desc,@@next_arg_name,@@next_long_desc,@@skips_pre,@@skips_post)
  commands[command.name] = command
  yield command
  command.tap do |c|
    c.desc "Help"
    c.switch [:h, :help]
  end
  clear_nexts
end

require 'pagoda/cli/commands'
require 'pagoda/cli'

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  unless global[:username] && global[:password]
    puts "it appears this is the first time you have used our client"
    user, password = Pagoda::Command::Base.ask_for_credentials
    GLI.run(["--username=#{user}","--password=#{password}","initconfig"])
  end

  if global[:help] or options[:help]
    GLI.commands[:help].execute(global, {}, [ command.name ])
    false
  else
    true
  end
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  ENV['GLI_DEBUG'] = 'true'
  false
end

exit GLI.run(ARGV)
